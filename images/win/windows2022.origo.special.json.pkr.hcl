variable "agent_tools_directory" {
  type    = string
  default = "C:\\hostedtoolcache\\windows"
}

variable "allowed_inbound_ip_addresses" {
  type    = string
  default = "${env("AGENT_IP")}"
}

variable "build_resource_group_name" {
  type    = string
  default = "${env("BUILD_RESOURCE_GROUP_NAME")}"
}

variable "client_id" {
  type    = string
  default = "${env("ARM_CLIENT_ID")}"
}

variable "client_secret" {
  type      = string
  default   = "${env("ARM_CLIENT_SECRET")}"
  sensitive = true
}

variable "devexpress_pass" {
  type    = string
  default = "${env("DEVEXPRESS_PASS")}"
}

variable "devexpress_user" {
  type    = string
  default = "${env("DEVEXPRESS_USER")}"
}

variable "devexpress_version" {
  type    = string
  default = "${env("DEVEXPRESS_VERSION")}"
}

variable "gallery_dest_image_name" {
  type    = string
  default = "${env("gallery_dest_image_name")}"
}

variable "gallery_dest_image_version" {
  type    = string
  default = "${env("gallery_dest_image_version")}"
}

variable "gallery_name" {
  type    = string
  default = "${env("gallery_name")}"
}

variable "gallery_resource_group" {
  type    = string
  default = "${env("gallery_resource_group")}"
}

variable "gallery_source_image_name" {
  type    = string
  default = "${env("gallery_source_image_name")}"
}

variable "gallery_source_image_version" {
  type    = string
  default = "${env("gallery_source_image_version")}"
}

variable "helper_script_folder" {
  type    = string
  default = "C:\\Program Files\\WindowsPowerShell\\Modules\\"
}

variable "image_folder" {
  type    = string
  default = "C:\\image"
}

variable "image_os" {
  type    = string
  default = "win22"
}

variable "image_version" {
  type    = string
  default = "latest"
}

variable "imagedata_file" {
  type    = string
  default = "C:\\imagedata.json"
}

variable "install_password" {
  type      = string
  sensitive = true
}

variable "install_user" {
  type    = string
  default = "installerorigo"
}

variable "installer_account_name" {
  type    = string
  default = "${env("INSTALLER_ACCOUNT_NAME")}"
}

variable "installer_container_name" {
  type    = string
  default = "${env("INSTALLER_CONTAINER_NAME")}"
}

variable "installer_sas_token" {
  type    = string
  default = "${env("INSTALLER_SAS_TOKEN")}"
}

variable "location" {
  type    = string
  default = "${env("ARM_RESOURCE_LOCATION")}"
}

variable "managed_image_name" {
  type    = string
  default = "${env("managed_image_name")}"
}

variable "managed_image_resource_group_name" {
  type    = string
  default = "${env("managed_image_resource_group_name")}"
}

variable "object_id" {
  type    = string
  default = "${env("ARM_OBJECT_ID")}"
}

variable "private_virtual_network_with_public_ip" {
  type    = string
  default = "${env("PRIVATE_VIRTUAL_NETWORK_WITH_PUBLIC_IP")}"
}

variable "subscription_id" {
  type    = string
  default = "${env("ARM_SUBSCRIPTION_ID")}"
}

variable "temp_resource_group_name" {
  type    = string
  default = "${env("TEMP_RESOURCE_GROUP_NAME")}"
}

variable "tenant_id" {
  type    = string
  default = "${env("ARM_TENANT_ID")}"
}

variable "virtual_network_name" {
  type    = string
  default = "${env("VNET_NAME")}"
}

variable "virtual_network_resource_group_name" {
  type    = string
  default = "${env("VNET_RESOURCE_GROUP")}"
}

variable "virtual_network_subnet_name" {
  type    = string
  default = "${env("VNET_SUBNET")}"
}

variable "vm_size" {
  type    = string
  default = "Standard_D8s_v4"
}

source "azure-arm" "autogenerated_1" {
  allowed_inbound_ip_addresses           = "${var.allowed_inbound_ip_addresses}"
  build_resource_group_name              = "${var.build_resource_group_name}"
  client_id                              = "${var.client_id}"
  client_secret                          = "${var.client_secret}"
  communicator                           = "winrm"
  location                               = "${var.location}"
  managed_image_name                     = "${var.managed_image_name}"
  managed_image_resource_group_name      = "${var.managed_image_resource_group_name}"
  object_id                              = "${var.object_id}"
  os_disk_size_gb                        = "256"
  os_type                                = "Windows"
  private_virtual_network_with_public_ip = "${var.private_virtual_network_with_public_ip}"
  shared_image_gallery {
    gallery_name   = "${var.gallery_name}"
    image_name     = "${var.gallery_source_image_name}"
    image_version  = "${var.gallery_source_image_version}"
    resource_group = "${var.gallery_resource_group}"
    subscription   = "${var.subscription_id}"
  }
  shared_image_gallery_destination {
    gallery_name        = "${var.gallery_name}"
    image_name          = "${var.gallery_dest_image_name}"
    image_version       = "${var.gallery_dest_image_version}"
    replication_regions = ["${var.location}"]
    resource_group      = "${var.gallery_resource_group}"
    subscription        = "${var.subscription_id}"
  }
  subscription_id                     = "${var.subscription_id}"
  temp_resource_group_name            = "${var.temp_resource_group_name}"
  tenant_id                           = "${var.tenant_id}"
  virtual_network_name                = "${var.virtual_network_name}"
  virtual_network_resource_group_name = "${var.virtual_network_resource_group_name}"
  virtual_network_subnet_name         = "${var.virtual_network_subnet_name}"
  vm_size                             = "${var.vm_size}"
  winrm_insecure                      = "true"
  winrm_use_ssl                       = "true"
  winrm_username                      = "packer"
}

build {
  sources = ["source.azure-arm.autogenerated_1"]

  provisioner "windows-shell" {
    inline = ["net user ${var.install_user} ${var.install_password} /add /passwordchg:no /passwordreq:yes /active:yes /Y", "net localgroup Administrators ${var.install_user} /add", "winrm set winrm/config/service/auth @{Basic=\"true\"}", "winrm get winrm/config/service/auth"]
  }

  provisioner "powershell" {
    inline = ["if (-not ((net localgroup Administrators) -contains '${var.install_user}')) { exit 1 }"]
  }

  provisioner "powershell" {
    inline = ["if (-not (Test-Path -Path ${var.image_folder})){New-Item -Path ${var.image_folder} -ItemType Directory -Force}"]
  }

  provisioner "file" {
    destination = "${var.image_folder}\\toolsetVS.json"
    source      = "${path.root}/toolsets/toolset-2019-VS.json"
  }

  provisioner "powershell" {
    elevated_password = "${var.install_password}"
    elevated_user     = "${var.install_user}"
    scripts           = ["${path.root}/scripts/Installers/origo/Install-VS-2019.ps1"]
    valid_exit_codes  = [0, 3010]
  }

  provisioner "powershell" {
    environment_vars = ["INSTALLER_ACCOUNT_NAME=${var.installer_account_name}", "INSTALLER_CONTAINER_NAME=${var.installer_container_name}", "INSTALLER_SAS_TOKEN=${var.installer_sas_token}", "DEVEXPRESS_VERSION=${var.devexpress_version}", "DEVEXPRESS_USER=${var.devexpress_user}", "DEVEXPRESS_PASS=${var.devexpress_pass}"]
    execution_policy = "unrestricted"
    scripts          = ["${path.root}/scripts/Installers/origo/Install-DevExpress.ps1"]
  }

  provisioner "powershell" {
    inline = ["if( Test-Path $Env:SystemRoot\\System32\\Sysprep\\unattend.xml ){ rm $Env:SystemRoot\\System32\\Sysprep\\unattend.xml -Force}", "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /mode:vm /quiet /quit", "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"]
  }

}
