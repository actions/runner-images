{
    "variables": {
        "client_id": "{{env `ARM_CLIENT_ID`}}",
        "client_secret": "{{env `ARM_CLIENT_SECRET`}}",
        "subscription_id": "{{env `ARM_SUBSCRIPTION_ID`}}",
        "tenant_id": "{{env `ARM_TENANT_ID`}}",
        "object_id": "{{env `ARM_OBJECT_ID`}}",
        "resource_group": "{{env `ARM_RESOURCE_GROUP`}}",
        "storage_account": "{{env `ARM_STORAGE_ACCOUNT`}}",
        "temp_resource_group_name": "{{env `TEMP_RESOURCE_GROUP_NAME`}}",
        "location": "{{env `ARM_RESOURCE_LOCATION`}}",
        "ssh_password": "{{env `SSH_PASSWORD`}}",
        "virtual_network_name": "{{env `VNET_NAME`}}",
        "virtual_network_resource_group_name": "{{env `VNET_RESOURCE_GROUP`}}",
        "virtual_network_subnet_name": "{{env `VNET_SUBNET`}}",
        "private_virtual_network_with_public_ip": "{{env `PRIVATE_VIRTUAL_NETWORK_WITH_PUBLIC_IP`}}",
        "vm_size": "Standard_D4_v2",
        "run_scan_antivirus": "false",

        "root_folder": "C:",
        "toolset_json_path": "{{env `TEMP`}}\\toolset.json",
        "image_folder": "C:\\image",
        "commit_file": "C:\\image\\commit.txt",
        "imagedata_file": "C:\\imagedata.json",
        "metadata_file": "C:\\image\\metadata.txt",
        "helper_script_folder": "C:\\Program Files\\WindowsPowerShell\\Modules\\",
        "commit_id": "LATEST",
        "install_user": "installer",
        "install_password": null,
        "capture_name_prefix": "packer",
        "image_version": "dev",
        "image_os": "win19",
        "github_feed_token": "{{env `GITHUB_FEED_TOKEN`}}"
    },
    "sensitive-variables": ["install_password", "ssh_password", "client_secret", "github_feed_token"],
    "builders": [
        {
            "name": "vhd",
            "type": "azure-arm",
            "client_id": "{{user `client_id`}}",
            "client_secret": "{{user `client_secret`}}",
            "subscription_id": "{{user `subscription_id`}}",
            "object_id": "{{user `object_id`}}",
            "tenant_id": "{{user `tenant_id`}}",
            "os_disk_size_gb": "256",
            "location": "{{user `location`}}",
            "vm_size": "{{user `vm_size`}}",
            "resource_group_name": "{{user `resource_group`}}",
            "storage_account": "{{user `storage_account`}}",
            "temp_resource_group_name": "{{user `temp_resource_group_name`}}",
            "capture_container_name": "images",
            "capture_name_prefix": "{{user `capture_name_prefix`}}",
            "virtual_network_name": "{{user `virtual_network_name`}}",
            "virtual_network_resource_group_name": "{{user `virtual_network_resource_group_name`}}",
            "virtual_network_subnet_name": "{{user `virtual_network_subnet_name`}}",
            "private_virtual_network_with_public_ip": "{{user `private_virtual_network_with_public_ip`}}",
            "os_type": "Windows",
            "image_publisher": "MicrosoftWindowsServer",
            "image_offer": "WindowsServer",
            "image_sku": "2019-Datacenter",
            "communicator": "winrm",
            "winrm_use_ssl": "true",
            "winrm_insecure": "true",
            "winrm_username": "packer"
        }
    ],
    "provisioners": [
        {
            "type": "powershell",
            "inline":[
                "New-Item -Path {{user `image_folder`}} -ItemType Directory -Force",
                "Write-Output {{user `commit_id`}} > {{user `commit_file`}}",
                "Write-Host (Get-Content -Path {{user `commit_file`}})"
            ]
        },
        {
            "type": "file",
            "source": "{{ template_dir }}/scripts/ImageHelpers",
            "destination": "{{user `helper_script_folder`}}"
        },
        {
            "type": "file",
            "source": "{{ template_dir }}/scripts/SoftwareReport",
            "destination": "{{user `image_folder`}}"
        },
        {
            "type": "file",
            "source": "{{ template_dir }}/scripts/Tests",
            "destination": "{{user `image_folder`}}"
        },
        {
            "type": "windows-shell",
            "inline": [
                "net user {{user `install_user`}} {{user `install_password`}} /add /passwordchg:no /passwordreq:yes /active:yes /Y" ,
                "net localgroup Administrators {{user `install_user`}} /add",
                "winrm set winrm/config/service/auth @{Basic=\"true\"}",
                "winrm get winrm/config/service/auth"
            ]
        },
        {
            "type": "powershell",
            "inline": [
                "if (-not ((net localgroup Administrators) -contains '{{user `install_user`}}')) { exit 1 }"
            ]
        },
        {
            "type": "powershell",
            "environment_vars": [
                "ImageVersion={{user `image_version`}}"
            ],
            "scripts":[
                "{{ template_dir }}/scripts/Installers/Windows2019/Initialize-VM.ps1"
            ],
            "execution_policy": "unrestricted"
        },
        {
            "type": "windows-restart",
            "restart_timeout": "10m"
        },
        {
            "type": "powershell",
            "scripts":[
                "{{ template_dir }}/scripts/Installers/Install-Kind.ps1",
                "{{ template_dir }}/scripts/Installers/Install-Cmake.ps1",
                "{{ template_dir }}/scripts/Installers/Install-7zip.ps1",
                "{{ template_dir }}/scripts/Installers/Install-MongoDB.ps1",
                "{{ template_dir }}/scripts/Installers/Install-JavaTools.ps1"
            ]
        },
        {
            "type": "windows-restart",
            "restart_timeout": "10m"
        },
        {
            "type": "powershell",
            "scripts":[
                "{{ template_dir }}/scripts/Installers/Finalize-VM.ps1"
            ]
        },
        {
            "type": "windows-restart",
            "restart_timeout": "10m"
        },
        {
            "type": "powershell",
            "scripts":[
                "{{ template_dir }}/scripts/Tests/RunAll-Tests.ps1"
            ]
        },
        {
            "type": "powershell",
            "inline": [
                "if( Test-Path $Env:SystemRoot\\System32\\Sysprep\\unattend.xml ){ rm $Env:SystemRoot\\System32\\Sysprep\\unattend.xml -Force}",
                "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit",
                "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"
            ]
        }
    ]
}