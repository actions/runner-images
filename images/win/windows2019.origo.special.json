{
    "variables": {
        "client_id": "{{env `ARM_CLIENT_ID`}}",
        "client_secret": "{{env `ARM_CLIENT_SECRET`}}",
        "subscription_id": "{{env `ARM_SUBSCRIPTION_ID`}}",
        "tenant_id": "{{env `ARM_TENANT_ID`}}",
        "object_id": "{{env `ARM_OBJECT_ID`}}",
        "resource_group": "{{env `ARM_RESOURCE_GROUP`}}",
        "storage_account": "{{env `ARM_STORAGE_ACCOUNT`}}",
        "build_resource_group_name": "{{env `BUILD_RESOURCE_GROUP_NAME`}}",
        "temp_resource_group_name": "{{env `TEMP_RESOURCE_GROUP_NAME`}}",
        "location": "{{env `ARM_RESOURCE_LOCATION`}}",
        "virtual_network_name": "{{env `VNET_NAME`}}",
        "virtual_network_resource_group_name": "{{env `VNET_RESOURCE_GROUP`}}",
        "virtual_network_subnet_name": "{{env `VNET_SUBNET`}}",
        "private_virtual_network_with_public_ip": "{{env `PRIVATE_VIRTUAL_NETWORK_WITH_PUBLIC_IP`}}",
        "allowed_inbound_ip_addresses": "{{env `AGENT_IP`}}",
        "vm_size": "Standard_D8s_v4",
        "image_folder": "C:\\image",
        "imagedata_file": "C:\\imagedata.json",
        "helper_script_folder": "C:\\Program Files\\WindowsPowerShell\\Modules\\",
        "agent_tools_directory": "C:\\hostedtoolcache\\windows",
        "install_user": "installer",
        "install_password": null,
        "image_os": "win19",
        "installer_account_name": "{{env `INSTALLER_ACCOUNT_NAME`}}",
        "installer_container_name": "{{env `INSTALLER_CONTAINER_NAME`}}",
        "installer_sas_token": "{{env `INSTALLER_SAS_TOKEN`}}",
        "devexpress_version": "{{env `DEVEXPRESS_VERSION`}}",
        "devexpress_user": "{{env `DEVEXPRESS_USER`}}",
        "devexpress_pass": "{{env `DEVEXPRESS_PASS`}}"

    },
    "sensitive-variables": [
        "install_password",
        "client_secret"
    ],
    "builders": [
        {
            "type": "azure-arm",
            "client_id": "{{user `client_id`}}",
            "client_secret": "{{user `client_secret`}}",
            "subscription_id": "{{user `subscription_id`}}",
            "object_id": "{{user `object_id`}}",
            "tenant_id": "{{user `tenant_id`}}",
            "os_disk_size_gb": "256",
            "location": "{{user `location`}}",
            "vm_size": "{{user `vm_size`}}",
            "build_resource_group_name": "{{user `build_resource_group_name`}}",
            "temp_resource_group_name": "{{user `temp_resource_group_name`}}",
            
            "shared_image_gallery": {
                "subscription": "{{user `subscription_id`}}",
                 "resource_group": "DevOps-PackerResources",
                 "gallery_name": "origoimages",
                 "image_name": "2019base",
                 "image_version": "1.0.1"
         },

         "managed_image_name": "origoimage2",
         "managed_image_resource_group_name": "{{user `resource_group`}}",

           "shared_image_gallery_destination": {
              "resource_group": "DevOps-PackerResources",
              "gallery_name": "origoimages",
              "image_name": "2019base",
              "image_version": "1.0.2",
              "replication_regions": ["{{user `location`}}"]
         },
            "virtual_network_name": "{{user `virtual_network_name`}}",
            "virtual_network_resource_group_name": "{{user `virtual_network_resource_group_name`}}",
            "virtual_network_subnet_name": "{{user `virtual_network_subnet_name`}}",
            "private_virtual_network_with_public_ip": "{{user `private_virtual_network_with_public_ip`}}",
            "allowed_inbound_ip_addresses": "{{user `allowed_inbound_ip_addresses`}}",
            "os_type": "Windows",
            "communicator": "winrm",
            "winrm_use_ssl": "true",
            "winrm_insecure": "true",
            "winrm_username": "packer"
        }
    ],
    "provisioners": [
        {
            "type": "windows-shell",
            "inline": [
                "net user {{user `install_user`}} {{user `install_password`}} /add /passwordchg:no /passwordreq:yes /active:yes /Y",
                "net localgroup Administrators {{user `install_user`}} /add",
                "winrm set winrm/config/service/auth @{Basic=\"true\"}",
                "winrm get winrm/config/service/auth"
            ]
        },
        {
            "type": "powershell",
            "inline": [
                "if (-not ((net localgroup Administrators) -contains '{{user `install_user`}}')) { exit 1 }"
            ]
        },
        {
            "type": "powershell",
            "environment_vars": [
                "INSTALLER_ACCOUNT_NAME={{user `installer_account_name`}}",
                "INSTALLER_CONTAINER_NAME={{user `installer_container_name`}}",
                "INSTALLER_SAS_TOKEN={{user `installer_sas_token`}}",
                "DEVEXPRESS_VERSION={{user `devexpress_version`}}",
                "DEVEXPRESS_USER={{user `devexpress_user`}}",
                "DEVEXPRESS_PASS={{user `devexpress_pass`}}"
              ],
            "inline": [
                "if( Test-Path {{ template_dir }}/scripts/Installers/Install-DevExpress.ps1 ){ Import-Module -Path {{ template_dir }}/scripts/Installers/Install-DevExpress.ps1 -Verbose -Force}",
                "else{Write-Output \"Template_dir not found\"} ",
                "$installerVersion = $env:DEVEXPRESS_VERSION",
                "$installerAccountName = $env:INSTALLER_ACCOUNT_NAME",
                "$installerContainerName = $env:INSTALLER_CONTAINER_NAME",
                "$installerSASToken = $env:INSTALLER_SAS_TOKEN",
                "$devexpressUser = $env:DEVEXPRESS_USER",
                "$devexpressPass = $env:DEVEXPRESS_PASS",
                "Write-Output \"Value of parameters TEST:\"",
                "Write-Output \"The DEVEXPRESS_VERSION:        $Env:DEVEXPRESS_VERSION\"",
                "Write-Output \"The INSTALLER_ACCOUNT_NAME:    $Env:INSTALLER_ACCOUNT_NAME\"",
                "Write-Output \"The INSTALLER_CONTAINER_NAME:  $Env:INSTALLER_CONTAINER_NAME\"",
                "Write-Output \"The DEVEXPRESS_USER:           $devexpressUser\""
              ]
        },
        {
            "type": "powershell",
            "inline": [
                "if( Test-Path $Env:SystemRoot\\System32\\Sysprep\\unattend.xml ){ rm $Env:SystemRoot\\System32\\Sysprep\\unattend.xml -Force}",
                "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit",
                "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"
            ]
        }
    ]
}
