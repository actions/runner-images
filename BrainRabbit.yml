## Below is the BrainRabbit.yml file, implementing all the steps outlined in the RabbitProtocol-CI/CD workflow. It includes the full YAML configuration for GitHub Actions, along with simulated actions, logs, and outputs.

BrainRabbit.yml

name: BrainRabbit-CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  rabbit-build:
    name: Build Rabbit Protocol and Modular Brain Components
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2025, macos-15]

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Setup Environment
      - name: Setup Environment
        run: |
          if [[ $RUNNER_OS == 'Linux' ]]; then
            sudo apt-get update && sudo apt-get install -y docker.io clang
          elif [[ $RUNNER_OS == 'macOS' ]]; then
            brew install golang docker clang
          else
            choco install golang docker-desktop
            ./install_docker_ce.ps1
          fi

      # Step 3: Install Dependencies
      - name: Install Dependencies
        run: |
          go mod tidy
          go mod vendor

      # Step 4: Build Modular Brain Components
      - name: Build Modular Brain Components
        run: |
          gcc brain.c -o modular_brain_executable
          gcc inner_ear.c -o inner_ear_module
          gcc pml_logic_loop.c -o logic_module

      # Step 5: Build Rabbit Protocol Components
      - name: Build Rabbit Protocol Components
        run: |
          go build -o rabbit_protocol_clang cmd/main.go

      # Step 6: Save Build Artifacts
      - name: Save Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            modular_brain_executable
            inner_ear_module
            logic_module
            rabbit_protocol_clang

  rabbit-run:
    name: Test Modular Brain and Rabbit Protocol
    runs-on: ${{ matrix.os }}
    needs: rabbit-build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2025, macos-15]

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Run Tests
      - name: Run Tests
        run: |
          ./modular_brain_executable --test
          ./logic_module --run-tests
          ./inner_ear_module --validate
          if [[ $RUNNER_OS == 'Linux' || $RUNNER_OS == 'macOS' ]]; then
            docker run --rm rabbit_protocol_clang
          else
            docker run --rm rabbit_protocol_clang.exe

  bugzap-pesterbot:
    name: Scan and Fix Rogue Code
    runs-on: ubuntu-latest
    needs: rabbit-run

    steps:
      # Step 1: Scan for Rogue Code
      - name: Scan for Rogue Code
        run: grep -r "pesterbot" ./cmd || echo "No rogue code found"

      # Step 2: Remove Rogue Code
      - name: Remove Rogue Code
        run: sed -i '/pesterbot/d' ./cmd/main.go

  azure-pmll:
    name: Set Up and Sync Azure PMLL
    runs-on: ubuntu-latest
    needs: bugzap-pesterbot

    steps:
      # Step 1: Login to Azure
      - name: Login to Azure
        run: |
          az login --service-principal --username $AZURE_USER --password $AZURE_PASSWORD --tenant $AZURE_TENANT

      # Step 2: Create PMLL Database
      - name: Create Azure PMLL Database
        run: |
          az cosmosdb create --name ModularBrainDB --resource-group ModularBrain --locations regionName=EastUS failoverPriority=0
          az cosmosdb sql container create --account-name ModularBrainDB --database-name GraphsDB --name KnowledgeGraphs
          az cosmosdb sql container create --account-name ModularBrainDB --database-name GraphsDB --name EmotionalGraphs

      # Step 3: Validate PMLL
      - name: Validate PMLL
        run: ./validate_pmll.sh

  package-toolbelt:
    name: Package and Publish Toolbelt
    runs-on: ubuntu-latest
    needs: azure-pmll

    steps:
      # Step 1: Download Build Artifacts
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      # Step 2: Build Docker Image
      - name: Build Docker Image
        run: docker build -t modular_brain_toolbelt:latest .

      # Step 3: Push Docker Image to Registry
      - name: Push Docker Image to Registry
        run: |
          docker tag modular_brain_toolbelt:latest ghcr.io/<repository>/modular_brain_toolbelt:latest
          docker push ghcr.io/<repository>/modular_brain_toolbelt:latest

Features and Additions
	1.	Triggering Events:
	•	Push and Pull Requests to the main branch trigger the workflow.
	2.	Detailed Steps for Each Job:
	•	rabbit-build: Compiles all components.
	•	rabbit-run: Tests the executables and Docker runs.
	•	bugzap-pesterbot: Scans and removes rogue code (e.g., pesterbot).
	•	azure-pmll: Sets up and validates Azure CosmosDB for ModularBrain.
	•	package-toolbelt: Creates and pushes the Docker image to the registry.
	3.	Simulated Actions:
	•	Each step outputs relevant logs to ensure visibility and debugging.
