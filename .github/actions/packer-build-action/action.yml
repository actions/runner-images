name: 'packer-build-action'
description: 'Build images with Packer'

inputs:
  image_type:
    description: >-
      One of the `ImageType` defined in `./helpers/GenerateResourcesAndImage.ps1`.
    required: true

runs:
  using: 'composite'
  steps:
    - name: Disk space before pruning
      shell: pwsh
      run: |
        echo "::group::Disk space before pruning"
        switch ("${{ runner.os }}") {
          "Linux" {
            df -h
          }
          "Windows" {
            Get-PSDrive -PSProvider FileSystem
          }
        }
        echo "::endgroup::"

    - name: Prune software (APT)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "::group::Installed APT packages"
        dpkg -l
        echo "::endgroup::"

        echo "::group::Remove APT packages"
        sudo apt-mark minimize-manual --yes
        packages=(
          ant
          ant-optional
          apache2*
          aspnetcore-*
          azure-cli
          clang-*
          dotnet-*
          google-chrome-stable
          libmono-*
          lld-*
          lldb-*
          libmono*
          libnginx-*
          llvm-*
          microsoft-edge-stable
          mongodb-*
          mono-*
          mysql-*
          nginx
          php*
          podman
          postgresql-*
          r-*
          ruby*
          temurin-*
          walinuxagent
        )
        sudo apt-get remove --purge -y ${packages[@]}
        echo "::endgroup::"

        echo "::group::Remaining APT packages"
        dpkg -l
        echo "::endgroup::"

        echo "::group::Disk space after removing apt packages"
        df -h
        echo "::endgroup::"

        echo "::group::Remove directories/files"
        paths=(
          /etc/skel/.cargo
          /etc/skel/.composer
          /etc/skel/.dotnet
          /etc/skel/.nvm
          /etc/skel/.rustup
          /opt/actionarchivecache
          /opt/az
          /opt/hostedtoolcache
          /opt/pipx
          /opt/pipx_bin
          /opt/runner
          /opt/runner-cache
          /usr/local/.ghcup
          /usr/local/aws-cli
          /usr/local/aws-sam-cli
          /usr/local/bin/aliyun
          /usr/local/bin/azcopy*
          /usr/local/bin/bicep
          /usr/local/bin/ccmake
          /usr/local/bin/cmake
          /usr/local/bin/cmake-gui
          /usr/local/bin/cpack
          /usr/local/bin/ctest
          /usr/local/bin/helm
          /usr/local/bin/kind
          /usr/local/bin/kustomize
          /usr/local/bin/minikube
          /usr/local/bin/oc
          /usr/local/bin/pulumi*
          /usr/local/bin/terraform
          /usr/local/julia*
          /usr/local/lib/android
          /usr/local/lib/node_modules
          /usr/local/share/chromedriver-linux64
          /usr/local/share/chromium
          /usr/local/share/cmake-*
          /usr/local/share/edge_driver
          /usr/local/share/gecko_driver
          /usr/local/share/powershell
          /usr/local/share/vcpkg
          /usr/local/sqlpackage
          /usr/share/az_*
          /usr/share/gradle-*
          /usr/share/kotlinc
          /usr/share/miniconda
          /usr/share/sbt
          /usr/share/swift
        )
        sudo rm -rf ${paths[@]}
        echo "::endgroup::"

    - name: Disk space after pruning
      shell: pwsh
      run: |
        echo "::group::Disk space after pruning"
        switch ("${{ runner.os }}") {
          "Linux" {
            df -h
          }
          "Windows" {
            Get-PSDrive -PSProvider FileSystem
          }
        }
        echo "::endgroup::"

    - name: Prune docker images
      shell: pwsh
      run: |
        echo "::group::docker image prune"
        docker image prune --all --force
        echo "::endgroup::"

        echo "::group::Disk space after pruning docker images"
        switch ("${{ runner.os }}") {
          "Linux" {
            df -h
          }
          "Windows" {
            Get-PSDrive -PSProvider FileSystem
          }
        }
        echo "::endgroup::"

    - name: Setup `packer`
      id: setup
      uses: hashicorp/setup-packer@main
      with:
        version: '1.10.1'

    - name: Pre-configure Packer
      id: preconfig
      shell: pwsh
      run: |
        switch -Wildcard ("${{ inputs.image_type }}") {
          "Ubuntu*" {
            $imageOs = "ubuntu"
          }
          "Windows*" {
            $imageOs = "windows"
          }
        }

        echo "::group::Pre-configure Packer"
        & {
          echo "image_os=${imageOs}";
        } | tee -a "$env:GITHUB_OUTPUT"
        echo "::endgroup::"

    - name: Build `${{ inputs.image_type }}`
      shell: pwsh
      env:
        PACKER_LOG: 1
      run: |
        Import-Module .\helpers\GenerateResourcesAndImage.ps1

        echo "::group::Generate Image"
        GenerateResourcesAndImage -ImageType ${{ inputs.image_type }}
        echo "::endgroup::"

        $readme = Join-Path "images" "${{ steps.preconfig.outputs.image_os }}" "${{ inputs.image_type }}-Readme.md"
        Get-Content -Path "$readme" | Out-File -Append -FilePath "$env:GITHUB_STEP_SUMMARY"

    - name: Upload generated reports
      uses: actions/upload-artifact@v4
      with:
        name: reports-${{ inputs.image_type }}
        path: |
          images/${{ steps.preconfig.outputs.image_os }}/${{ inputs.image_type }}-Readme.md
          images/${{ steps.preconfig.outputs.image_os }}/software-report.json
