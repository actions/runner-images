# This Azure DevOps pipeline can generate an Azure DevOps Agent image.
#
# It only runs on self hosted agents, including VMSS agents. It cannot be run on hosted agents, as the
# runtime is longer than a self-hosted agent allows. This may create a chicken-egg problem, which can be resolved
# by generating the first image manually / locally.
#
# This Azure DevOps pipeline requires a number of variables to be defined. It is suggested to define them via the
# Azure DevOps GUI in order to avoid security issues with stored passwords in repositories. All variables are mandatory.
# The service principal is required to have owner permissions on the subscription.
#
#
# Required variables:
# - azure_client_id           # service principal with owner permissions
# - azure_client_secret       # service principal with owner permissions
# - azure_location            # example: East US
# - azure_tenant_id
# - github_token
# - image_type                # example: Windows2019
# - pool_name                 # example: my_private_pool
# - resource_group_name       # example: PackerForAzureAgent123
# - subscription_id
# - virtual_environments_ref  # Git reference to the commit/tag/branch. Example: refs/tags/win19/20210211.1
#

trigger: none
pr: none

pool:
  name: '$(pool_name)'

resources:
  repositories:
    # It would be handy to define endpoint and ref dynamically via a variable. Unfortunately, variables are not
    # supported in repository definitions.
    - repository: virtual-environments # The name used to reference this repository in the checkout step
      type: github
      endpoint: my-service-endpoint # replace this with your actual endpoint name
      name: actions/virtual-environments
      ref: main
stages:
  - stage: CreateImage
    displayName: Create VM and VHD
    jobs:
      - job: CreateImage
        timeoutInMinutes: 1000
        displayName: Create VM image
        steps:
        - checkout: self
        - checkout: virtual-environments

        - task: Powershell@2
          inputs:
            targetType: inline
            script: |
              Install-Module -Name Az -AllowClobber -Scope CurrentUser -Force
          displayName: Install clobber

        - task: Powershell@2
          inputs:
            targetType: inline
            script: |
              cd virtual-environments
              git checkout $(virtual_environments_ref)
              git status
              Import-Module .\helpers\GenerateResourcesAndImage.ps1 -Force
              type .\helpers\GenerateResourcesAndImage.ps1
              echo "Debug * Azure Client Id: $(azure_client_id)"
              GenerateResourcesAndImage `
                -SubscriptionId $(subscription_id) `
                -ResourceGroupName "$(resource_group_name)" `
                -ImageGenerationRepositoryRoot "$pwd" `
                -ImageType $(image_type) `
                -AzureLocation "$(azure_location)" `
                -GithubFeedToken $(github_token) `
                -AzureClientId "$(azure_client_id)" `
                -AzureClientSecret "$(azure_client_secret)" `
                -AzureTenantId "$(azure_tenant_id)"
          displayName: Generate Image
