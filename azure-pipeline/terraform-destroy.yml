pool:
  vmImage: 'ubuntu-latest'

trigger: none

variables:
- group: terraform-sample
- template: variable_groups/terraform-sample-variables.yml
   
steps:
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: Install Terraform $(terraform-version)
    inputs:
      terraformVersion: $(terraform-version)
  - task: CmdLine@2
    displayName: Terraform Init
    inputs:
      script: terraform init -backend-config="access_key=$(access_key)" -backend-config="storage_account_name=$(storage_account_name)" -backend-config="container_name=$(container_name)" -backend-config="key=$(key)"
      workingDirectory: $(terafform-workdir)
  - task: CmdLine@2
    condition: eq(${{ parameters.ForcePlan }}, true)
    displayName: Terraform Destroy with Force
    inputs:
      script: terraform destroy -lock=false -auto-approve -var-file $(configuration-file-path) -var="spn-client-id=$(spn_client_id)" -var="spn-client-secret=$(spn_client_secret)" -var="spn-tenant-id=$(spn_tenant_id)" -var="subscription-id=$(subscription_id)"
      workingDirectory: $(terafform-workdir)      
  - task: CmdLine@2
    condition: eq(${{ parameters.ForcePlan }}, false)
    displayName: Terraform Destroy
    inputs:
      script: terraform destroy -auto-approve -var-file $(configuration-file-path) -var="spn-client-id=$(spn_client_id)" -var="spn-client-secret=$(spn_client_secret)" -var="spn-tenant-id=$(spn_tenant_id)" -var="subscription-id=$(subscription_id)"
      workingDirectory: $(terafform-workdir)


      